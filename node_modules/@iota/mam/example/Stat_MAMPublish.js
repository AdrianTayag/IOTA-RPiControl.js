//WIP: fetching from other scripts, protecc status and SC status, timelooping

const Mam = require('../lib/mam.client.js')
const { asciiToTrytes, trytesToAscii } = require('@iota/converter')

const mode = 'public'
const provider = 'https://nodes.devnet.iota.org'

const mamExplorerLink = `https://mam-explorer.firebaseapp.com/?provider=${encodeURIComponent(provider)}&mode=${mode}&root=`

// Initialise MAM State
let mamState = Mam.init(provider)

// Publish to tangle
const publish = async packet => {
    // Create MAM Payload - STRING OF TRYTES
    const trytes = asciiToTrytes(JSON.stringify(packet))
    const message = Mam.create(mamState, trytes)

    // Save new mamState
    mamState = message.state
    // Attach the payload
    await Mam.attach(message.payload, message.address, 3, 9, 'Bins')

    console.log('Published at ', Date().toLocaleString(), packet, '\n');
    console.log('Root: ', message.root, '\n');
    return message.root
}

const publishAll = async () => {
  const root = await publish({ //protecc.stats and SourceController.stats
    message: 'Status Report',
    timestamp: (new Date()).toLocaleString()
    MS-1 Voltage: + ' V',
    MS-1 Power: + ' mW',
    MS-2 Voltage: + ' V',
    MS-2 Power: + ' mW',
    MS-3 Voltage: + ' V',
    MS-3 Power: + ' mW',
    MS Breakers: ,
    Safety Breakers: ,
    PCC Breaker: ,
    SD Breaker:
  })
  return root
}

// Callback used to pass data out of the fetch
const logData = data => console.log('Fetched and parsed at ', Date().toLocaleString(), '\n', JSON.parse(trytesToAscii(data)), '\n')

publishAll()
  .then(async root => {

    const result = await Mam.fetch(root, mode)
    var status
    result.messages.forEach(message => status =  JSON.parse(trytesToAscii(message)))
    console.log(status)

    console.log(`Verify with MAM Explorer:\n${mamExplorerLink}${root}\n`);
  })
